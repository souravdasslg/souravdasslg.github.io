{"version":3,"sources":["containers/GameArea/DashBoard/DashBoard.css","containers/GameArea/Error/Error.css","containers/GameArea/GameArea.css","utilities/utilities.js","containers/GameArea/ScoreCard/ScoreCard.css","containers/GameArea/ScoreCard/ScoreCard.js","containers/GameArea/DashBoard/DashBoard.js","containers/GameArea/Error/Error.js","containers/GameArea/GameArea.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","dashboardCard","btn","success","errorCard","danger","GameArea","Canvas","randomBetweenRange","low","high","Math","floor","random","scoreCard","ScoreCard","react_default","a","createElement","className","classes","this","props","score","Component","DashBoard","concat","onClick","startGameAction","Error","playAgain","initialSnakeArray","x","y","snake","currentMovingDirection","isFoodPresent","boxSize","state","gameStatus","drawSnake","_this","ctx","clearRect","placeFood","i","length","fillStyle","fillRect","strokeStyle","strokeRect","advanceSnake","unshift","getNewHead","food","increaseScore","pop","crossedEdges","snakeCollidedWithItself","clearInterval","intervalReference","setState","snakeBodyWithOutHead","Object","toConsumableArray","slice","findIndex","prevState","randomX","randomY","handleKeyPress","event","key","startGameHandler","canvas","refs","getContext","setInterval","playAgainHandler","document","addEventListener","_this2","GameArea_DashBoard_DashBoard","height","width","ref","GameArea_Error_Error","GameArea_ScoreCard_ScoreCard","App","containers_GameArea_GameArea","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c94b87a1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dashboardCard\":\"DashBoard__dashboardCard__8YK9T\",\"btn\":\"DashBoard__btn__z6g5d\",\"success\":\"DashBoard__success__3hcX7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorCard\":\"Error__errorCard__1V9Cp\",\"btn\":\"Error__btn__3jMnG\",\"danger\":\"Error__danger__1ftc7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GameArea\":\"GameArea__GameArea__p6jGg\",\"Canvas\":\"GameArea__Canvas__2KB0G\"};","let randomBetweenRange =(low,high) => {\n\n    let number =  Math.floor(Math.random()*(high/10-low/10)+low/10) * 10\n    return number\n\n}\nmodule.exports = {\n    randomBetweenRange\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scoreCard\":\"ScoreCard__scoreCard__1ckVb\"};","import React,{Component} from 'react'\nimport classes from './ScoreCard.css'\nclass ScoreCard extends Component {\n    render() {\n        return(\n            <div className={classes.scoreCard}>\n                Score : {this.props.score}\n            </div>\n        )\n    }\n}\nexport default ScoreCard","import React from 'react'\nimport classes from './DashBoard.css'\nconst DashBoard = (props) => {\n   return (\n       <div className={classes.dashboardCard}>\n       <button className={`${classes.btn} ${classes.success}`} onClick={props.startGameAction()}>Start</button>\n       </div>\n   )\n}\nexport default DashBoard","import React from 'react'\nimport classes from './Error.css'\nconst Error = (props) => {\n    return (\n        <div className={classes.errorCard}>\n            <button className={`${classes.btn} ${classes.danger}`} onClick={props.playAgain()}> Play Again </button>\n        </div>\n    )\n}\nexport default Error","import React,{Component} from 'react'\nimport classes from './GameArea.css'\nimport {randomBetweenRange} from '../../utilities/utilities'\nimport findIndex from 'lodash.findindex'\nimport ScoreCard from './ScoreCard/ScoreCard';\nimport DashBoard from './DashBoard/DashBoard';\nimport Error from './Error/Error';\nclass GameArea extends Component {\n    initialSnakeArray = [{x:100,y:100},{x:90,y:100},{x:80,y:100}]\n    snake = [{x:100,y:100},{x:90,y:100},{x:80,y:100}]\n    canvas\n    ctx\n    currentMovingDirection = 'Right'\n    food\n    isFoodPresent = false\n    boxSize = 10\n    state = {\n        score:0,\n        gameStatus:'notReady',\n    }\n    intervalReference\n    drawSnake = () => {\n        this.ctx.clearRect(0,0,500,500)\n        this.placeFood()\n        for(let i = 0;i<this.snake.length;i++){\n            this.ctx.fillStyle = (i===0) ?'white':'red'\n            this.ctx.fillRect(this.snake[i].x,this.snake[i].y,this.boxSize,this.boxSize)\n            this.ctx.strokeStyle = 'blue'\n            this.ctx.strokeRect(this.snake[i].x,this.snake[i].y,this.boxSize,this.boxSize)\n        }\n    }\n    advanceSnake = () => {\n        this.snake.unshift(this.getNewHead())\n        if(this.snake[0].x===this.food.x && this.snake[0].y ===this.food.y) {\n            this.increaseScore()\n            this.isFoodPresent = false\n            this.placeFood()\n        } else {\n            this.snake.pop()\n        }\n        if(this.crossedEdges() || this.snakeCollidedWithItself()) {\n            clearInterval(this.intervalReference)\n            this.setState({gameStatus:'error'})\n        }\n        this.drawSnake()\n    }\n    crossedEdges = () => {\n        if (this.snake[0].x >= 400 || this.snake[0].x <= 0 || this.snake[0].y >= 400 || this.snake[0].y <= 0) {\n            return true\n        } else {\n            return false\n        } \n    }\n    snakeCollidedWithItself = () => {\n        let snakeBodyWithOutHead = [...this.snake].slice(1)\n        if(findIndex(snakeBodyWithOutHead,this.snake[0])===-1) {\n            return false\n        } else {\n            return true\n        }\n    }\n    getNewHead = () => {\n        let x = this.snake[0].x\n        let y = this.snake[0].y\n        if(this.currentMovingDirection === 'Up') y -= this.boxSize\n        if(this.currentMovingDirection === 'Down')  y += this.boxSize\n        if(this.currentMovingDirection === 'Left') x -= this.boxSize\n        if(this.currentMovingDirection === 'Right') x += this.boxSize\n        return {x,y}\n    }\n    increaseScore = () => {\n        this.setState((prevState)=>{\n            return {score: prevState.score+10}\n        })\n    }\n    placeFood = () => {\n        if(!this.isFoodPresent) {\n        let randomX = randomBetweenRange(0,400)\n        let randomY = randomBetweenRange(0,400)\n        this.ctx.fillStyle = 'orange'\n        this.ctx.fillRect(randomX,randomY,this.boxSize,this.boxSize)\n        this.ctx.strokeStyle = 'blue'\n        this.ctx.strokeRect(randomX,randomY,this.boxSize,this.boxSize)\n        this.food = {x:randomX,y:randomY}\n        this.isFoodPresent = true\n        } else {\n        this.ctx.fillStyle = 'orange'\n        this.ctx.fillRect(this.food.x,this.food.y,this.boxSize,this.boxSize)\n        this.ctx.strokeStyle = 'blue'\n        this.ctx.strokeRect(this.food.x,this.food.y,this.boxSize,this.boxSize)\n        }\n    }\n    handleKeyPress = (event) => {\n        \n        if(event.key==='ArrowUp' && this.currentMovingDirection !== 'Down') {\n            this.currentMovingDirection = 'Up'\n        } else if (event.key==='ArrowDown' && this.currentMovingDirection !== 'Up') {\n            this.currentMovingDirection = 'Down'\n        } else if (event.key ==='ArrowRight' && this.currentMovingDirection !=='Left') {\n            this.currentMovingDirection = 'Right'\n        } else if (event.key === 'ArrowLeft' && this.currentMovingDirection !== 'Right') {\n            this.currentMovingDirection = 'Left'\n        } else {\n\n        }\n    }\n    startGameHandler = () => {\n        this.setState({gameStatus:'started'},()=>{\n            this.canvas = this.refs.canvas\n            this.ctx = this.canvas.getContext('2d')\n            this.drawSnake()\n            this.intervalReference = setInterval(this.advanceSnake,100)\n        })\n    }\n    playAgainHandler = () => {\n        this.snake = [...this.initialSnakeArray]\n        this.setState({gameStatus:'started'},()=>{\n            this.canvas = this.refs.canvas\n            this.ctx = this.canvas.getContext('2d')\n            this.drawSnake()\n            this.setState({score:0})\n            this.currentMovingDirection = 'Right'\n            this.intervalReference = setInterval(this.advanceSnake,100)\n        })\n    }\n    componentDidMount() {\n        document.addEventListener('keydown',this.handleKeyPress)\n    }\n    render() {\n        return (\n            <div className={classes.GameArea}>\n               {this.state.gameStatus==='notReady'?<DashBoard startGameAction={()=>this.startGameHandler}/>:null}\n               {this.state.gameStatus === 'started'?<canvas height='400' width='400' className={classes.Canvas} ref='canvas'/> :null}\n               {this.state.gameStatus==='error'?<Error playAgain={()=>this.playAgainHandler}/>:null}\n               <ScoreCard score={this.state.score} />\n            </div>\n        )\n    }\n}\nexport default GameArea","import React from 'react';\nimport GameArea from './containers/GameArea/GameArea'\n\n\nfunction App() {\n  return (\n    <GameArea />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}